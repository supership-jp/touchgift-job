// Code generated by MockGen. DO NOT EDIT.
// Source: queue_handler.go

// Package mock_gateways is a generated GoMock package.
package mock_gateways

import (
	context "context"
	reflect "reflect"
	sync "sync"
	infra "touchgift-job-manager/infra"

	gomock "github.com/golang/mock/gomock"
)

// MockQueueHandler is a mock of QueueHandler interface.
type MockQueueHandler struct {
	ctrl     *gomock.Controller
	recorder *MockQueueHandlerMockRecorder
}

// MockQueueHandlerMockRecorder is the mock recorder for MockQueueHandler.
type MockQueueHandlerMockRecorder struct {
	mock *MockQueueHandler
}

// NewMockQueueHandler creates a new mock instance.
func NewMockQueueHandler(ctrl *gomock.Controller) *MockQueueHandler {
	mock := &MockQueueHandler{ctrl: ctrl}
	mock.recorder = &MockQueueHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQueueHandler) EXPECT() *MockQueueHandlerMockRecorder {
	return m.recorder
}

// DeleteMessage mocks base method.
func (m *MockQueueHandler) DeleteMessage(ctx context.Context, message infra.QueueMessage) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeleteMessage", ctx, message)
}

// DeleteMessage indicates an expected call of DeleteMessage.
func (mr *MockQueueHandlerMockRecorder) DeleteMessage(ctx, message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMessage", reflect.TypeOf((*MockQueueHandler)(nil).DeleteMessage), ctx, message)
}

// OutputDeleteCliLog mocks base method.
func (m *MockQueueHandler) OutputDeleteCliLog(message infra.QueueMessage) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OutputDeleteCliLog", message)
}

// OutputDeleteCliLog indicates an expected call of OutputDeleteCliLog.
func (mr *MockQueueHandlerMockRecorder) OutputDeleteCliLog(message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OutputDeleteCliLog", reflect.TypeOf((*MockQueueHandler)(nil).OutputDeleteCliLog), message)
}

// Poll mocks base method.
func (m *MockQueueHandler) Poll(ctx context.Context, wg *sync.WaitGroup, ch chan infra.QueueMessage, maxMessages int64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Poll", ctx, wg, ch, maxMessages)
}

// Poll indicates an expected call of Poll.
func (mr *MockQueueHandlerMockRecorder) Poll(ctx, wg, ch, maxMessages interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Poll", reflect.TypeOf((*MockQueueHandler)(nil).Poll), ctx, wg, ch, maxMessages)
}

// UnprocessableMessage mocks base method.
func (m *MockQueueHandler) UnprocessableMessage() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UnprocessableMessage")
}

// UnprocessableMessage indicates an expected call of UnprocessableMessage.
func (mr *MockQueueHandlerMockRecorder) UnprocessableMessage() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnprocessableMessage", reflect.TypeOf((*MockQueueHandler)(nil).UnprocessableMessage))
}
