// Code generated by MockGen. DO NOT EDIT.
// Source: delivery_control_event.go

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	context "context"
	reflect "reflect"
	models "touchgift-job-manager/domain/models"

	gomock "github.com/golang/mock/gomock"
)

// MockDeliveryControlEvent is a mock of DeliveryControlEvent interface.
type MockDeliveryControlEvent struct {
	ctrl     *gomock.Controller
	recorder *MockDeliveryControlEventMockRecorder
}

// MockDeliveryControlEventMockRecorder is the mock recorder for MockDeliveryControlEvent.
type MockDeliveryControlEventMockRecorder struct {
	mock *MockDeliveryControlEvent
}

// NewMockDeliveryControlEvent creates a new mock instance.
func NewMockDeliveryControlEvent(ctrl *gomock.Controller) *MockDeliveryControlEvent {
	mock := &MockDeliveryControlEvent{ctrl: ctrl}
	mock.recorder = &MockDeliveryControlEventMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDeliveryControlEvent) EXPECT() *MockDeliveryControlEventMockRecorder {
	return m.recorder
}

// PublishCampaignEvent mocks base method.
func (m *MockDeliveryControlEvent) PublishCampaignEvent(ctx context.Context, CampaignID, groupID int, organization, before, after, detail string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PublishCampaignEvent", ctx, CampaignID, groupID, organization, before, after, detail)
}

// PublishCampaignEvent indicates an expected call of PublishCampaignEvent.
func (mr *MockDeliveryControlEventMockRecorder) PublishCampaignEvent(ctx, CampaignID, groupID, organization, before, after, detail interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishCampaignEvent", reflect.TypeOf((*MockDeliveryControlEvent)(nil).PublishCampaignEvent), ctx, CampaignID, groupID, organization, before, after, detail)
}

// PublishCreativeEvent mocks base method.
func (m *MockDeliveryControlEvent) PublishCreativeEvent(ctx context.Context, creative *models.DeliveryDataCreative, organization, action string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PublishCreativeEvent", ctx, creative, organization, action)
}

// PublishCreativeEvent indicates an expected call of PublishCreativeEvent.
func (mr *MockDeliveryControlEventMockRecorder) PublishCreativeEvent(ctx, creative, organization, action interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishCreativeEvent", reflect.TypeOf((*MockDeliveryControlEvent)(nil).PublishCreativeEvent), ctx, creative, organization, action)
}

// PublishDeliveryEvent mocks base method.
func (m *MockDeliveryControlEvent) PublishDeliveryEvent(ctx context.Context, id string, groupID int, storeID string, campaignID int, organization, action string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PublishDeliveryEvent", ctx, id, groupID, storeID, campaignID, organization, action)
}

// PublishDeliveryEvent indicates an expected call of PublishDeliveryEvent.
func (mr *MockDeliveryControlEventMockRecorder) PublishDeliveryEvent(ctx, id, groupID, storeID, campaignID, organization, action interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishDeliveryEvent", reflect.TypeOf((*MockDeliveryControlEvent)(nil).PublishDeliveryEvent), ctx, id, groupID, storeID, campaignID, organization, action)
}
