// Code generated by MockGen. DO NOT EDIT.
// Source: delivery_start.go

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	context "context"
	reflect "reflect"
	time "time"
	models "touchgift-job-manager/domain/models"
	repository "touchgift-job-manager/domain/repository"

	gomock "github.com/golang/mock/gomock"
)

// MockDeliveryStart is a mock of DeliveryStart interface.
type MockDeliveryStart struct {
	ctrl     *gomock.Controller
	recorder *MockDeliveryStartMockRecorder
}

// MockDeliveryStartMockRecorder is the mock recorder for MockDeliveryStart.
type MockDeliveryStartMockRecorder struct {
	mock *MockDeliveryStart
}

// NewMockDeliveryStart creates a new mock instance.
func NewMockDeliveryStart(ctrl *gomock.Controller) *MockDeliveryStart {
	mock := &MockDeliveryStart{ctrl: ctrl}
	mock.recorder = &MockDeliveryStartMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDeliveryStart) EXPECT() *MockDeliveryStartMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockDeliveryStart) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockDeliveryStartMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockDeliveryStart)(nil).Close))
}

// CreateDeliveryDatas mocks base method.
func (m *MockDeliveryStart) CreateDeliveryDatas(ctx context.Context, tx repository.Transaction, campaign *models.Campaign) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDeliveryDatas", ctx, tx, campaign)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateDeliveryDatas indicates an expected call of CreateDeliveryDatas.
func (mr *MockDeliveryStartMockRecorder) CreateDeliveryDatas(ctx, tx, campaign interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDeliveryDatas", reflect.TypeOf((*MockDeliveryStart)(nil).CreateDeliveryDatas), ctx, tx, campaign)
}

// CreateWorker mocks base method.
func (m *MockDeliveryStart) CreateWorker(ctx context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CreateWorker", ctx)
}

// CreateWorker indicates an expected call of CreateWorker.
func (mr *MockDeliveryStartMockRecorder) CreateWorker(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWorker", reflect.TypeOf((*MockDeliveryStart)(nil).CreateWorker), ctx)
}

// ExecuteNow mocks base method.
func (m *MockDeliveryStart) ExecuteNow(schduleData *models.Campaign) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ExecuteNow", schduleData)
}

// ExecuteNow indicates an expected call of ExecuteNow.
func (mr *MockDeliveryStartMockRecorder) ExecuteNow(schduleData interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteNow", reflect.TypeOf((*MockDeliveryStart)(nil).ExecuteNow), schduleData)
}

// GetCampaignToStart mocks base method.
func (m *MockDeliveryStart) GetCampaignToStart(ctx context.Context, to time.Time, status string, limit int) ([]*models.Campaign, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCampaignToStart", ctx, to, status, limit)
	ret0, _ := ret[0].([]*models.Campaign)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCampaignToStart indicates an expected call of GetCampaignToStart.
func (mr *MockDeliveryStartMockRecorder) GetCampaignToStart(ctx, to, status, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCampaignToStart", reflect.TypeOf((*MockDeliveryStart)(nil).GetCampaignToStart), ctx, to, status, limit)
}

// Reserve mocks base method.
func (m *MockDeliveryStart) Reserve(ctx context.Context, startAt time.Time, Campaign *models.Campaign) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Reserve", ctx, startAt, Campaign)
}

// Reserve indicates an expected call of Reserve.
func (mr *MockDeliveryStartMockRecorder) Reserve(ctx, startAt, Campaign interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reserve", reflect.TypeOf((*MockDeliveryStart)(nil).Reserve), ctx, startAt, Campaign)
}

// UpdateStatus mocks base method.
func (m *MockDeliveryStart) UpdateStatus(ctx context.Context, tx repository.Transaction, Campaign *models.Campaign, status string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStatus", ctx, tx, Campaign, status)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateStatus indicates an expected call of UpdateStatus.
func (mr *MockDeliveryStartMockRecorder) UpdateStatus(ctx, tx, Campaign, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatus", reflect.TypeOf((*MockDeliveryStart)(nil).UpdateStatus), ctx, tx, Campaign, status)
}
