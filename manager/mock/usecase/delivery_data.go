// Code generated by MockGen. DO NOT EDIT.
// Source: delivery_data.go

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockDeliveryData is a mock of DeliveryData interface.
type MockDeliveryData struct {
	ctrl     *gomock.Controller
	recorder *MockDeliveryDataMockRecorder
}

// MockDeliveryDataMockRecorder is the mock recorder for MockDeliveryData.
type MockDeliveryDataMockRecorder struct {
	mock *MockDeliveryData
}

// NewMockDeliveryData creates a new mock instance.
func NewMockDeliveryData(ctrl *gomock.Controller) *MockDeliveryData {
	mock := &MockDeliveryData{ctrl: ctrl}
	mock.recorder = &MockDeliveryDataMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDeliveryData) EXPECT() *MockDeliveryDataMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockDeliveryData) Delete(ctx context.Context, campaignID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, campaignID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockDeliveryDataMockRecorder) Delete(ctx, campaignID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockDeliveryData)(nil).Delete), ctx, campaignID)
}

// Put mocks base method.
func (m *MockDeliveryData) Put(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Put", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Put indicates an expected call of Put.
func (mr *MockDeliveryDataMockRecorder) Put(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockDeliveryData)(nil).Put), ctx)
}
