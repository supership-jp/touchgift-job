// Code generated by MockGen. DO NOT EDIT.
// Source: delivery.go

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	context "context"
	reflect "reflect"
	time "time"
	models "touchgift-job-manager/domain/models"
	repository "touchgift-job-manager/domain/repository"

	gomock "github.com/golang/mock/gomock"
)

// MockDelivery is a mock of Delivery interface.
type MockDelivery struct {
	ctrl     *gomock.Controller
	recorder *MockDeliveryMockRecorder
}

// MockDeliveryMockRecorder is the mock recorder for MockDelivery.
type MockDeliveryMockRecorder struct {
	mock *MockDelivery
}

// NewMockDelivery creates a new mock instance.
func NewMockDelivery(ctrl *gomock.Controller) *MockDelivery {
	mock := &MockDelivery{ctrl: ctrl}
	mock.recorder = &MockDeliveryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDelivery) EXPECT() *MockDeliveryMockRecorder {
	return m.recorder
}

// DeliveryControlEvent mocks base method.
func (m *MockDelivery) DeliveryControlEvent(ctx context.Context, campaign *models.Campaign, beforeStatus, afterStatus, detail string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeliveryControlEvent", ctx, campaign, beforeStatus, afterStatus, detail)
}

// DeliveryControlEvent indicates an expected call of DeliveryControlEvent.
func (mr *MockDeliveryMockRecorder) DeliveryControlEvent(ctx, campaign, beforeStatus, afterStatus, detail interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeliveryControlEvent", reflect.TypeOf((*MockDelivery)(nil).DeliveryControlEvent), ctx, campaign, beforeStatus, afterStatus, detail)
}

// StartOrSync mocks base method.
func (m *MockDelivery) StartOrSync(ctx context.Context, tx repository.Transaction, campaign *models.Campaign) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartOrSync", ctx, tx, campaign)
	ret0, _ := ret[0].(error)
	return ret0
}

// StartOrSync indicates an expected call of StartOrSync.
func (mr *MockDeliveryMockRecorder) StartOrSync(ctx, tx, campaign interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartOrSync", reflect.TypeOf((*MockDelivery)(nil).StartOrSync), ctx, tx, campaign)
}

// Stop mocks base method.
func (m *MockDelivery) Stop(ctx context.Context, tx repository.Transaction, campaign *models.Campaign, status string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop", ctx, tx, campaign, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop.
func (mr *MockDeliveryMockRecorder) Stop(ctx, tx, campaign, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockDelivery)(nil).Stop), ctx, tx, campaign, status)
}

// UpdateStatus mocks base method.
func (m *MockDelivery) UpdateStatus(ctx context.Context, tx repository.Transaction, campaignId int, status string, updatedAt time.Time) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStatus", ctx, tx, campaignId, status, updatedAt)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateStatus indicates an expected call of UpdateStatus.
func (mr *MockDeliveryMockRecorder) UpdateStatus(ctx, tx, campaignId, status, updatedAt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatus", reflect.TypeOf((*MockDelivery)(nil).UpdateStatus), ctx, tx, campaignId, status, updatedAt)
}
