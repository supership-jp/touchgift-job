// Code generated by MockGen. DO NOT EDIT.
// Source: creative.go

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	context "context"
	reflect "reflect"
	time "time"
	models "touchgift-job-manager/domain/models"
	repository "touchgift-job-manager/domain/repository"

	gomock "github.com/golang/mock/gomock"
)

// MockCreative is a mock of Creative interface.
type MockCreative struct {
	ctrl     *gomock.Controller
	recorder *MockCreativeMockRecorder
}

// MockCreativeMockRecorder is the mock recorder for MockCreative.
type MockCreativeMockRecorder struct {
	mock *MockCreative
}

// NewMockCreative creates a new mock instance.
func NewMockCreative(ctrl *gomock.Controller) *MockCreative {
	mock := &MockCreative{ctrl: ctrl}
	mock.recorder = &MockCreativeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCreative) EXPECT() *MockCreativeMockRecorder {
	return m.recorder
}

// Process mocks base method.
func (m *MockCreative) Process(ctx context.Context, tx repository.Transaction, current time.Time, creativeLogs *[]models.CreativeLog) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Process", ctx, tx, current, creativeLogs)
	ret0, _ := ret[0].(error)
	return ret0
}

// Process indicates an expected call of Process.
func (mr *MockCreativeMockRecorder) Process(ctx, tx, current, creativeLogs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Process", reflect.TypeOf((*MockCreative)(nil).Process), ctx, tx, current, creativeLogs)
}

// Put mocks base method.
func (m *MockCreative) Put(ctx context.Context, creatives *[]models.DeliveryDataCreative) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Put", ctx, creatives)
	ret0, _ := ret[0].(error)
	return ret0
}

// Put indicates an expected call of Put.
func (mr *MockCreativeMockRecorder) Put(ctx, creatives interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockCreative)(nil).Put), ctx, creatives)
}
