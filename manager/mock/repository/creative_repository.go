// Code generated by MockGen. DO NOT EDIT.
// Source: creative_repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	reflect "reflect"
	models "touchgift-job-manager/domain/models"
	repository "touchgift-job-manager/domain/repository"

	gomock "github.com/golang/mock/gomock"
)

// MockCreativeRepository is a mock of CreativeRepository interface.
type MockCreativeRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCreativeRepositoryMockRecorder
}

// MockCreativeRepositoryMockRecorder is the mock recorder for MockCreativeRepository.
type MockCreativeRepositoryMockRecorder struct {
	mock *MockCreativeRepository
}

// NewMockCreativeRepository creates a new mock instance.
func NewMockCreativeRepository(ctrl *gomock.Controller) *MockCreativeRepository {
	mock := &MockCreativeRepository{ctrl: ctrl}
	mock.recorder = &MockCreativeRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCreativeRepository) EXPECT() *MockCreativeRepositoryMockRecorder {
	return m.recorder
}

// GetCreative mocks base method.
func (m *MockCreativeRepository) GetCreative(ctx context.Context, tx repository.Transaction, args *repository.CreativeCondition) ([]models.Creative, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCreative", ctx, tx, args)
	ret0, _ := ret[0].([]models.Creative)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCreative indicates an expected call of GetCreative.
func (mr *MockCreativeRepositoryMockRecorder) GetCreative(ctx, tx, args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCreative", reflect.TypeOf((*MockCreativeRepository)(nil).GetCreative), ctx, tx, args)
}

// GetCreativeByCampaignID mocks base method.
func (m *MockCreativeRepository) GetCreativeByCampaignID(ctx context.Context, tx repository.Transaction, args *repository.CreativeByCampaignIDCondition) ([]*models.Creative, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCreativeByCampaignID", ctx, tx, args)
	ret0, _ := ret[0].([]*models.Creative)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCreativeByCampaignID indicates an expected call of GetCreativeByCampaignID.
func (mr *MockCreativeRepositoryMockRecorder) GetCreativeByCampaignID(ctx, tx, args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCreativeByCampaignID", reflect.TypeOf((*MockCreativeRepository)(nil).GetCreativeByCampaignID), ctx, tx, args)
}
