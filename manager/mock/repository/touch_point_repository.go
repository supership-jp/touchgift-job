// Code generated by MockGen. DO NOT EDIT.
// Source: touch_point_repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	reflect "reflect"
	models "touchgift-job-manager/domain/models"
	repository "touchgift-job-manager/domain/repository"

	gomock "github.com/golang/mock/gomock"
)

// MockTouchPointRepository is a mock of TouchPointRepository interface.
type MockTouchPointRepository struct {
	ctrl     *gomock.Controller
	recorder *MockTouchPointRepositoryMockRecorder
}

// MockTouchPointRepositoryMockRecorder is the mock recorder for MockTouchPointRepository.
type MockTouchPointRepositoryMockRecorder struct {
	mock *MockTouchPointRepository
}

// NewMockTouchPointRepository creates a new mock instance.
func NewMockTouchPointRepository(ctrl *gomock.Controller) *MockTouchPointRepository {
	mock := &MockTouchPointRepository{ctrl: ctrl}
	mock.recorder = &MockTouchPointRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTouchPointRepository) EXPECT() *MockTouchPointRepositoryMockRecorder {
	return m.recorder
}

// GetTouchPointByGroupID mocks base method.
func (m *MockTouchPointRepository) GetTouchPointByGroupID(ctx context.Context, tx repository.Transaction, args *repository.TouchPointByGroupIDCondition) ([]*models.TouchPoint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTouchPointByGroupID", ctx, tx, args)
	ret0, _ := ret[0].([]*models.TouchPoint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTouchPointByGroupID indicates an expected call of GetTouchPointByGroupID.
func (mr *MockTouchPointRepositoryMockRecorder) GetTouchPointByGroupID(ctx, tx, args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTouchPointByGroupID", reflect.TypeOf((*MockTouchPointRepository)(nil).GetTouchPointByGroupID), ctx, tx, args)
}
