// Code generated by MockGen. DO NOT EDIT.
// Source: content_repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	reflect "reflect"
	models "touchgift-job-manager/domain/models"
	repository "touchgift-job-manager/domain/repository"

	gomock "github.com/golang/mock/gomock"
)

// MockContentRepository is a mock of ContentRepository interface.
type MockContentRepository struct {
	ctrl     *gomock.Controller
	recorder *MockContentRepositoryMockRecorder
}

// MockContentRepositoryMockRecorder is the mock recorder for MockContentRepository.
type MockContentRepositoryMockRecorder struct {
	mock *MockContentRepository
}

// NewMockContentRepository creates a new mock instance.
func NewMockContentRepository(ctrl *gomock.Controller) *MockContentRepository {
	mock := &MockContentRepository{ctrl: ctrl}
	mock.recorder = &MockContentRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockContentRepository) EXPECT() *MockContentRepositoryMockRecorder {
	return m.recorder
}

// GetCouponsByCampaignID mocks base method.
func (m *MockContentRepository) GetCouponsByCampaignID(ctx context.Context, tx repository.Transaction, args *repository.ContentByCampaignIDCondition) ([]*models.Coupon, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCouponsByCampaignID", ctx, tx, args)
	ret0, _ := ret[0].([]*models.Coupon)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCouponsByCampaignID indicates an expected call of GetCouponsByCampaignID.
func (mr *MockContentRepositoryMockRecorder) GetCouponsByCampaignID(ctx, tx, args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCouponsByCampaignID", reflect.TypeOf((*MockContentRepository)(nil).GetCouponsByCampaignID), ctx, tx, args)
}

// GetGimmicksByCampaignID mocks base method.
func (m *MockContentRepository) GetGimmicksByCampaignID(ctx context.Context, tx repository.Transaction, campaignID *repository.ContentByCampaignIDCondition) (*string, *string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGimmicksByCampaignID", ctx, tx, campaignID)
	ret0, _ := ret[0].(*string)
	ret1, _ := ret[1].(*string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetGimmicksByCampaignID indicates an expected call of GetGimmicksByCampaignID.
func (mr *MockContentRepositoryMockRecorder) GetGimmicksByCampaignID(ctx, tx, campaignID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGimmicksByCampaignID", reflect.TypeOf((*MockContentRepository)(nil).GetGimmicksByCampaignID), ctx, tx, campaignID)
}

// MockContentHelper is a mock of ContentHelper interface.
type MockContentHelper struct {
	ctrl     *gomock.Controller
	recorder *MockContentHelperMockRecorder
}

// MockContentHelperMockRecorder is the mock recorder for MockContentHelper.
type MockContentHelperMockRecorder struct {
	mock *MockContentHelper
}

// NewMockContentHelper creates a new mock instance.
func NewMockContentHelper(ctrl *gomock.Controller) *MockContentHelper {
	mock := &MockContentHelper{ctrl: ctrl}
	mock.recorder = &MockContentHelperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockContentHelper) EXPECT() *MockContentHelperMockRecorder {
	return m.recorder
}

// GenerateContent mocks base method.
func (m *MockContentHelper) GenerateContent(ctx context.Context, args *repository.GenerateContentCondition) ([]*models.Content, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateContent", ctx, args)
	ret0, _ := ret[0].([]*models.Content)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateContent indicates an expected call of GenerateContent.
func (mr *MockContentHelperMockRecorder) GenerateContent(ctx, args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateContent", reflect.TypeOf((*MockContentHelper)(nil).GenerateContent), ctx, args)
}
