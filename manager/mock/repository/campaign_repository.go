// Code generated by MockGen. DO NOT EDIT.
// Source: campaign_repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	reflect "reflect"
	models "touchgift-job-manager/domain/models"
	repository "touchgift-job-manager/domain/repository"

	gomock "github.com/golang/mock/gomock"
)

// MockCampaignRepository is a mock of CampaignRepository interface.
type MockCampaignRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCampaignRepositoryMockRecorder
}

// MockCampaignRepositoryMockRecorder is the mock recorder for MockCampaignRepository.
type MockCampaignRepositoryMockRecorder struct {
	mock *MockCampaignRepository
}

// NewMockCampaignRepository creates a new mock instance.
func NewMockCampaignRepository(ctrl *gomock.Controller) *MockCampaignRepository {
	mock := &MockCampaignRepository{ctrl: ctrl}
	mock.recorder = &MockCampaignRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCampaignRepository) EXPECT() *MockCampaignRepositoryMockRecorder {
	return m.recorder
}

// GetCampaignToEnd mocks base method.
func (m *MockCampaignRepository) GetCampaignToEnd(ctx context.Context, campaign *repository.CampaignDataToEndCondition) ([]*models.Campaign, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCampaignToEnd", ctx, campaign)
	ret0, _ := ret[0].([]*models.Campaign)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCampaignToEnd indicates an expected call of GetCampaignToEnd.
func (mr *MockCampaignRepositoryMockRecorder) GetCampaignToEnd(ctx, campaign interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCampaignToEnd", reflect.TypeOf((*MockCampaignRepository)(nil).GetCampaignToEnd), ctx, campaign)
}

// GetCampaignToStart mocks base method.
func (m *MockCampaignRepository) GetCampaignToStart(ctx context.Context, tx repository.Transaction, args *repository.CampaignToStartCondition) ([]*models.Campaign, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCampaignToStart", ctx, tx, args)
	ret0, _ := ret[0].([]*models.Campaign)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCampaignToStart indicates an expected call of GetCampaignToStart.
func (mr *MockCampaignRepositoryMockRecorder) GetCampaignToStart(ctx, tx, args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCampaignToStart", reflect.TypeOf((*MockCampaignRepository)(nil).GetCampaignToStart), ctx, tx, args)
}

// GetDeliveryToStart mocks base method.
func (m *MockCampaignRepository) GetDeliveryToStart(ctx context.Context, tx repository.Transaction, args *repository.CampaignCondition) (*models.Campaign, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeliveryToStart", ctx, tx, args)
	ret0, _ := ret[0].(*models.Campaign)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeliveryToStart indicates an expected call of GetDeliveryToStart.
func (mr *MockCampaignRepositoryMockRecorder) GetDeliveryToStart(ctx, tx, args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeliveryToStart", reflect.TypeOf((*MockCampaignRepository)(nil).GetDeliveryToStart), ctx, tx, args)
}

// UpdateStatus mocks base method.
func (m *MockCampaignRepository) UpdateStatus(ctx context.Context, tx repository.Transaction, campaign *repository.UpdateCondition) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStatus", ctx, tx, campaign)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateStatus indicates an expected call of UpdateStatus.
func (mr *MockCampaignRepositoryMockRecorder) UpdateStatus(ctx, tx, campaign interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatus", reflect.TypeOf((*MockCampaignRepository)(nil).UpdateStatus), ctx, tx, campaign)
}
