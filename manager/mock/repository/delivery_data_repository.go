// Code generated by MockGen. DO NOT EDIT.
// Source: delivery_data_repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	reflect "reflect"
	models "touchgift-job-manager/domain/models"

	gomock "github.com/golang/mock/gomock"
)

// MockDeliveryDataCampaignRepository is a mock of DeliveryDataCampaignRepository interface.
type MockDeliveryDataCampaignRepository struct {
	ctrl     *gomock.Controller
	recorder *MockDeliveryDataCampaignRepositoryMockRecorder
}

// MockDeliveryDataCampaignRepositoryMockRecorder is the mock recorder for MockDeliveryDataCampaignRepository.
type MockDeliveryDataCampaignRepositoryMockRecorder struct {
	mock *MockDeliveryDataCampaignRepository
}

// NewMockDeliveryDataCampaignRepository creates a new mock instance.
func NewMockDeliveryDataCampaignRepository(ctrl *gomock.Controller) *MockDeliveryDataCampaignRepository {
	mock := &MockDeliveryDataCampaignRepository{ctrl: ctrl}
	mock.recorder = &MockDeliveryDataCampaignRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDeliveryDataCampaignRepository) EXPECT() *MockDeliveryDataCampaignRepositoryMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockDeliveryDataCampaignRepository) Delete(ctx context.Context, campaignID *string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, campaignID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockDeliveryDataCampaignRepositoryMockRecorder) Delete(ctx, campaignID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockDeliveryDataCampaignRepository)(nil).Delete), ctx, campaignID)
}

// DeleteAll mocks base method.
func (m *MockDeliveryDataCampaignRepository) DeleteAll(ctx context.Context, deleteDatas *[]models.DeliveryDataCampaign) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAll", ctx, deleteDatas)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAll indicates an expected call of DeleteAll.
func (mr *MockDeliveryDataCampaignRepositoryMockRecorder) DeleteAll(ctx, deleteDatas interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAll", reflect.TypeOf((*MockDeliveryDataCampaignRepository)(nil).DeleteAll), ctx, deleteDatas)
}

// Get mocks base method.
func (m *MockDeliveryDataCampaignRepository) Get(ctx context.Context, id *string) (*models.DeliveryDataCampaign, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(*models.DeliveryDataCampaign)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockDeliveryDataCampaignRepositoryMockRecorder) Get(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockDeliveryDataCampaignRepository)(nil).Get), ctx, id)
}

// Put mocks base method.
func (m *MockDeliveryDataCampaignRepository) Put(ctx context.Context, updateData *models.DeliveryDataCampaign) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Put", ctx, updateData)
	ret0, _ := ret[0].(error)
	return ret0
}

// Put indicates an expected call of Put.
func (mr *MockDeliveryDataCampaignRepositoryMockRecorder) Put(ctx, updateData interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockDeliveryDataCampaignRepository)(nil).Put), ctx, updateData)
}

// PutAll mocks base method.
func (m *MockDeliveryDataCampaignRepository) PutAll(ctx context.Context, updateData *[]models.DeliveryDataCampaign) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutAll", ctx, updateData)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutAll indicates an expected call of PutAll.
func (mr *MockDeliveryDataCampaignRepositoryMockRecorder) PutAll(ctx, updateData interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutAll", reflect.TypeOf((*MockDeliveryDataCampaignRepository)(nil).PutAll), ctx, updateData)
}

// MockDeliveryDataTouchPointRepository is a mock of DeliveryDataTouchPointRepository interface.
type MockDeliveryDataTouchPointRepository struct {
	ctrl     *gomock.Controller
	recorder *MockDeliveryDataTouchPointRepositoryMockRecorder
}

// MockDeliveryDataTouchPointRepositoryMockRecorder is the mock recorder for MockDeliveryDataTouchPointRepository.
type MockDeliveryDataTouchPointRepositoryMockRecorder struct {
	mock *MockDeliveryDataTouchPointRepository
}

// NewMockDeliveryDataTouchPointRepository creates a new mock instance.
func NewMockDeliveryDataTouchPointRepository(ctrl *gomock.Controller) *MockDeliveryDataTouchPointRepository {
	mock := &MockDeliveryDataTouchPointRepository{ctrl: ctrl}
	mock.recorder = &MockDeliveryDataTouchPointRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDeliveryDataTouchPointRepository) EXPECT() *MockDeliveryDataTouchPointRepositoryMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockDeliveryDataTouchPointRepository) Delete(ctx context.Context, campaignID *string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, campaignID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockDeliveryDataTouchPointRepositoryMockRecorder) Delete(ctx, campaignID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockDeliveryDataTouchPointRepository)(nil).Delete), ctx, campaignID)
}

// DeleteAll mocks base method.
func (m *MockDeliveryDataTouchPointRepository) DeleteAll(ctx context.Context, deleteDatas *[]models.DeliveryTouchPoint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAll", ctx, deleteDatas)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAll indicates an expected call of DeleteAll.
func (mr *MockDeliveryDataTouchPointRepositoryMockRecorder) DeleteAll(ctx, deleteDatas interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAll", reflect.TypeOf((*MockDeliveryDataTouchPointRepository)(nil).DeleteAll), ctx, deleteDatas)
}

// Get mocks base method.
func (m *MockDeliveryDataTouchPointRepository) Get(ctx context.Context, id *string) (*models.DeliveryTouchPoint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(*models.DeliveryTouchPoint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockDeliveryDataTouchPointRepositoryMockRecorder) Get(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockDeliveryDataTouchPointRepository)(nil).Get), ctx, id)
}

// Put mocks base method.
func (m *MockDeliveryDataTouchPointRepository) Put(ctx context.Context, updateData *models.DeliveryTouchPoint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Put", ctx, updateData)
	ret0, _ := ret[0].(error)
	return ret0
}

// Put indicates an expected call of Put.
func (mr *MockDeliveryDataTouchPointRepositoryMockRecorder) Put(ctx, updateData interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockDeliveryDataTouchPointRepository)(nil).Put), ctx, updateData)
}

// PutAll mocks base method.
func (m *MockDeliveryDataTouchPointRepository) PutAll(ctx context.Context, updateData *[]models.DeliveryTouchPoint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutAll", ctx, updateData)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutAll indicates an expected call of PutAll.
func (mr *MockDeliveryDataTouchPointRepositoryMockRecorder) PutAll(ctx, updateData interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutAll", reflect.TypeOf((*MockDeliveryDataTouchPointRepository)(nil).PutAll), ctx, updateData)
}

// MockDeliveryDataCreativeRepository is a mock of DeliveryDataCreativeRepository interface.
type MockDeliveryDataCreativeRepository struct {
	ctrl     *gomock.Controller
	recorder *MockDeliveryDataCreativeRepositoryMockRecorder
}

// MockDeliveryDataCreativeRepositoryMockRecorder is the mock recorder for MockDeliveryDataCreativeRepository.
type MockDeliveryDataCreativeRepositoryMockRecorder struct {
	mock *MockDeliveryDataCreativeRepository
}

// NewMockDeliveryDataCreativeRepository creates a new mock instance.
func NewMockDeliveryDataCreativeRepository(ctrl *gomock.Controller) *MockDeliveryDataCreativeRepository {
	mock := &MockDeliveryDataCreativeRepository{ctrl: ctrl}
	mock.recorder = &MockDeliveryDataCreativeRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDeliveryDataCreativeRepository) EXPECT() *MockDeliveryDataCreativeRepositoryMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockDeliveryDataCreativeRepository) Delete(ctx context.Context, campaignID *string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, campaignID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockDeliveryDataCreativeRepositoryMockRecorder) Delete(ctx, campaignID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockDeliveryDataCreativeRepository)(nil).Delete), ctx, campaignID)
}

// DeleteAll mocks base method.
func (m *MockDeliveryDataCreativeRepository) DeleteAll(ctx context.Context, deleteDatas *[]models.DeliveryDataCreative) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAll", ctx, deleteDatas)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAll indicates an expected call of DeleteAll.
func (mr *MockDeliveryDataCreativeRepositoryMockRecorder) DeleteAll(ctx, deleteDatas interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAll", reflect.TypeOf((*MockDeliveryDataCreativeRepository)(nil).DeleteAll), ctx, deleteDatas)
}

// Get mocks base method.
func (m *MockDeliveryDataCreativeRepository) Get(ctx context.Context, id *string) (*models.DeliveryDataCreative, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(*models.DeliveryDataCreative)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockDeliveryDataCreativeRepositoryMockRecorder) Get(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockDeliveryDataCreativeRepository)(nil).Get), ctx, id)
}

// Put mocks base method.
func (m *MockDeliveryDataCreativeRepository) Put(ctx context.Context, updateData *models.DeliveryDataCreative) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Put", ctx, updateData)
	ret0, _ := ret[0].(error)
	return ret0
}

// Put indicates an expected call of Put.
func (mr *MockDeliveryDataCreativeRepositoryMockRecorder) Put(ctx, updateData interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockDeliveryDataCreativeRepository)(nil).Put), ctx, updateData)
}

// PutAll mocks base method.
func (m *MockDeliveryDataCreativeRepository) PutAll(ctx context.Context, updateData *[]models.DeliveryDataCreative) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutAll", ctx, updateData)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutAll indicates an expected call of PutAll.
func (mr *MockDeliveryDataCreativeRepositoryMockRecorder) PutAll(ctx, updateData interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutAll", reflect.TypeOf((*MockDeliveryDataCreativeRepository)(nil).PutAll), ctx, updateData)
}

// UpdateTTL mocks base method.
func (m *MockDeliveryDataCreativeRepository) UpdateTTL(ctx context.Context, id string, ttl int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTTL", ctx, id, ttl)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTTL indicates an expected call of UpdateTTL.
func (mr *MockDeliveryDataCreativeRepositoryMockRecorder) UpdateTTL(ctx, id, ttl interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTTL", reflect.TypeOf((*MockDeliveryDataCreativeRepository)(nil).UpdateTTL), ctx, id, ttl)
}

// MockDeliveryDataContentRepository is a mock of DeliveryDataContentRepository interface.
type MockDeliveryDataContentRepository struct {
	ctrl     *gomock.Controller
	recorder *MockDeliveryDataContentRepositoryMockRecorder
}

// MockDeliveryDataContentRepositoryMockRecorder is the mock recorder for MockDeliveryDataContentRepository.
type MockDeliveryDataContentRepositoryMockRecorder struct {
	mock *MockDeliveryDataContentRepository
}

// NewMockDeliveryDataContentRepository creates a new mock instance.
func NewMockDeliveryDataContentRepository(ctrl *gomock.Controller) *MockDeliveryDataContentRepository {
	mock := &MockDeliveryDataContentRepository{ctrl: ctrl}
	mock.recorder = &MockDeliveryDataContentRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDeliveryDataContentRepository) EXPECT() *MockDeliveryDataContentRepositoryMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockDeliveryDataContentRepository) Delete(ctx context.Context, campaignID *string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, campaignID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockDeliveryDataContentRepositoryMockRecorder) Delete(ctx, campaignID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockDeliveryDataContentRepository)(nil).Delete), ctx, campaignID)
}

// DeleteAll mocks base method.
func (m *MockDeliveryDataContentRepository) DeleteAll(ctx context.Context, deleteDatas *[]models.DeliveryDataContent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAll", ctx, deleteDatas)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAll indicates an expected call of DeleteAll.
func (mr *MockDeliveryDataContentRepositoryMockRecorder) DeleteAll(ctx, deleteDatas interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAll", reflect.TypeOf((*MockDeliveryDataContentRepository)(nil).DeleteAll), ctx, deleteDatas)
}

// Get mocks base method.
func (m *MockDeliveryDataContentRepository) Get(ctx context.Context, id *string) (*models.DeliveryDataContent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(*models.DeliveryDataContent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockDeliveryDataContentRepositoryMockRecorder) Get(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockDeliveryDataContentRepository)(nil).Get), ctx, id)
}

// Put mocks base method.
func (m *MockDeliveryDataContentRepository) Put(ctx context.Context, updateData *models.DeliveryDataContent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Put", ctx, updateData)
	ret0, _ := ret[0].(error)
	return ret0
}

// Put indicates an expected call of Put.
func (mr *MockDeliveryDataContentRepositoryMockRecorder) Put(ctx, updateData interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockDeliveryDataContentRepository)(nil).Put), ctx, updateData)
}

// PutAll mocks base method.
func (m *MockDeliveryDataContentRepository) PutAll(ctx context.Context, updateData *[]models.DeliveryDataContent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutAll", ctx, updateData)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutAll indicates an expected call of PutAll.
func (mr *MockDeliveryDataContentRepositoryMockRecorder) PutAll(ctx, updateData interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutAll", reflect.TypeOf((*MockDeliveryDataContentRepository)(nil).PutAll), ctx, updateData)
}
