// Code generated by MockGen. DO NOT EDIT.
// Source: notification.go

// Package mock_notification is a generated GoMock package.
package mock_notification

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockNotificationHandler is a mock of NotificationHandler interface.
type MockNotificationHandler struct {
	ctrl     *gomock.Controller
	recorder *MockNotificationHandlerMockRecorder
}

// MockNotificationHandlerMockRecorder is the mock recorder for MockNotificationHandler.
type MockNotificationHandlerMockRecorder struct {
	mock *MockNotificationHandler
}

// NewMockNotificationHandler creates a new mock instance.
func NewMockNotificationHandler(ctrl *gomock.Controller) *MockNotificationHandler {
	mock := &MockNotificationHandler{ctrl: ctrl}
	mock.recorder = &MockNotificationHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNotificationHandler) EXPECT() *MockNotificationHandlerMockRecorder {
	return m.recorder
}

// Publish mocks base method.
func (m *MockNotificationHandler) Publish(ctx context.Context, message string, messageAttributes map[string]string) (*string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Publish", ctx, message, messageAttributes)
	ret0, _ := ret[0].(*string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Publish indicates an expected call of Publish.
func (mr *MockNotificationHandlerMockRecorder) Publish(ctx, message, messageAttributes interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockNotificationHandler)(nil).Publish), ctx, message, messageAttributes)
}
