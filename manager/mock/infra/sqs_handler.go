// Code generated by MockGen. DO NOT EDIT.
// Source: sqs_handler.go

// Package mock_infra is a generated GoMock package.
package mock_infra

import (
	context "context"
	reflect "reflect"
	sync "sync"
	infra "touchgift-job-manager/infra"

	gomock "github.com/golang/mock/gomock"
)

// MockSQSHandler is a mock of SQSHandler interface.
type MockSQSHandler struct {
	ctrl     *gomock.Controller
	recorder *MockSQSHandlerMockRecorder
}

// MockSQSHandlerMockRecorder is the mock recorder for MockSQSHandler.
type MockSQSHandlerMockRecorder struct {
	mock *MockSQSHandler
}

// NewMockSQSHandler creates a new mock instance.
func NewMockSQSHandler(ctrl *gomock.Controller) *MockSQSHandler {
	mock := &MockSQSHandler{ctrl: ctrl}
	mock.recorder = &MockSQSHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSQSHandler) EXPECT() *MockSQSHandlerMockRecorder {
	return m.recorder
}

// DeleteMessage mocks base method.
func (m *MockSQSHandler) DeleteMessage(ctx context.Context, message infra.QueueMessage) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeleteMessage", ctx, message)
}

// DeleteMessage indicates an expected call of DeleteMessage.
func (mr *MockSQSHandlerMockRecorder) DeleteMessage(ctx, message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMessage", reflect.TypeOf((*MockSQSHandler)(nil).DeleteMessage), ctx, message)
}

// OutputDeleteCliLog mocks base method.
func (m *MockSQSHandler) OutputDeleteCliLog(message infra.QueueMessage) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OutputDeleteCliLog", message)
}

// OutputDeleteCliLog indicates an expected call of OutputDeleteCliLog.
func (mr *MockSQSHandlerMockRecorder) OutputDeleteCliLog(message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OutputDeleteCliLog", reflect.TypeOf((*MockSQSHandler)(nil).OutputDeleteCliLog), message)
}

// Poll mocks base method.
func (m *MockSQSHandler) Poll(ctx context.Context, wg *sync.WaitGroup, ch chan infra.QueueMessage, sqsMaxMessages int64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Poll", ctx, wg, ch, sqsMaxMessages)
}

// Poll indicates an expected call of Poll.
func (mr *MockSQSHandlerMockRecorder) Poll(ctx, wg, ch, sqsMaxMessages interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Poll", reflect.TypeOf((*MockSQSHandler)(nil).Poll), ctx, wg, ch, sqsMaxMessages)
}

// UnprocessableMessage mocks base method.
func (m *MockSQSHandler) UnprocessableMessage() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UnprocessableMessage")
}

// UnprocessableMessage indicates an expected call of UnprocessableMessage.
func (mr *MockSQSHandlerMockRecorder) UnprocessableMessage() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnprocessableMessage", reflect.TypeOf((*MockSQSHandler)(nil).UnprocessableMessage))
}
